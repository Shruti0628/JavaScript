What are objects?

-> Objects are fundamentals of JS providing a way to group related data and functions together. In JS. an object is a collection of key-value pairs, where each key is 
a string and each value can be any data type including otehr objects. Objects can have properties and methods, making them versatile for various use cases.

Syntax: obj = {} 

We can create objects in JS by various methods. One of the method is using object literals.

const product = {
    id:1, 
    pName: "laptop",
    pType : function(){
        console.log("Getting the product");
    }
};
// Accessing elements using dot notation or square bracket notation
console.log(product.id);
console.log(product.pName); 
console.log(product["pName"]);

// Adding properties to the exisiting objects
product.quality = "assured"
product.mfd = "18-08-2020"
console.log(product);

                        -----METHODS-----
Methods in objects are functions associated with the object. They can be invoked using same notation properties.

product.pType();

                    -----Adding Dynamic Keys In An Object-----
let idType = "studentID"
let student = {
    [idType] = "123", // Dynamically sets id's
    sName = "Shruti",
    sAge = 22,
    isStudent: true,
};

console.log(student[idType])

// Data Modeling:

It is the process of creating a visual representation of either a whole info. system or parts of it to communicate connections between data points and strcutures. 
The goal is to illustrate types of data used and stored within the system, the relationship among these data types, ways data can be grouped and organized and its formats and attributes.
 


                    -----Pass by value and Pass by references-----

1. Pass by value: When passing by value, a copy of the primitive value is created and passed to the function or assigned to a variable. Any changes made to the copy doesn't affect the original value.
let a = 10;
const modifyValue = (x) => (x = 20);
console.log(modifyValue(a));
console.log(a);

2. Pass by reference: When passing by reference, a reference to the memory location of the object is passed to the function or assigned to a variable. Any changes made to the obejct through this reference
will affect the original object.

let obj = {
    id : 5,
    name : "kodyFier"
};

let obj1 = obj; // Copying the object
obj1.name = "Shruti"
console.log(obj1);
console.log("Original data" + obj); // This will show Original data [object Object], it's because of concatenation since it converts the dataType.
console.log("Original data", obj); // Original data gets modified because of pass by reference.


If we want to achieve, a behavior where we can create a true copy of the object, we can use methods like Object.assign() or the spread operator(...)
# Object.assign(): It's used to copy properties from one or more source objects to a target objects.

let obj = {id:1, prodname: Laptop};
let newObj = Object.assign({}, obj); // The {} is an empty object (target) and obj is the source to get copied.

or also we can write this way : 
obj1 = {};
newObj = Object.assign(obj1, obj);

newObj.prodname = "Mobile";
console.log(newObj);
console.log(obj); // using assign() will not modify the value that was assigned to the original data.


            ---Objects Useful Methods---

let product = {
    id : 123,
    pName: "Laptop",
    quality: "assured",
    mfd: "10-10-2024",
    stock_avail: 20,
    price: 90000,
}

1. Object.keys(): Returns an array containing the names of all enumerable own properties of an object.
let keys = Object.keys(product);
console.log(keys);

2. Object.values(): Returns an array containing the values of all enumerable own properties of an object.
let values = Object.values(product);
console.log(values);

3. Object.entries(): Returns an array containing arrays of key-value pairs for each enumerable own property of an object.
let entry = Object.entries(product);
console.log(entry); Will return something like this : ['id', 1], ['pName', 'Laptop'],etc...

4. Object.hasOwnProperty(): Returns a boolean indicating whether the object has specified property as an own or not.
5. Object.assign(): Copies the values of all enumerable own properties from one or more source objeccts to a target object.
6. Object.freeze(): Freezes an object, preventing new properties from being added to it and exisitng properties from being modified or deleted.
Object.freeze(product);
product.id = "333";
console.log(product) // This won't change the value since it's freezed

To add a new subject in a function inside an object we can do like this:
const addSubjectGrade = (student, subject, marks) => {
    if(!student.grade){
        student.grade = {}; // Will add the data when passed atleast.
    }
    return (student.grade[subject] = marks);
};
addSubjectGrade(student, "computer", 98);
console.log(student);

// PTR: In Object, we can never use length() or use forLoop(), so for comparison we can use keys to check the length only.

When we need to change or transform an array of an objects into an object where the keys are the object's ids.
let inputArray = [
    { id: 1, name: "Alice" },
    { id: 2, name: "Rob" },
];
const arrayToObj = (arr) => {
    let obj = {};
    for(let key of arr){
    console.log(key.id,key);    
    obj[key.id] = key;
}
return;
}
console.log(arrayToObj(inputArray));